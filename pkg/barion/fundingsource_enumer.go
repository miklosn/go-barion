// Code generated by "enumer -type=FundingSource -json"; DO NOT EDIT.

//
package barion

import (
	"encoding/json"
	"fmt"
)

const _FundingSourceName = "AllBalanceBankCardBankTransfer"

var _FundingSourceIndex = [...]uint8{0, 3, 10, 18, 30}

func (i FundingSource) String() string {
	if i < 0 || i >= FundingSource(len(_FundingSourceIndex)-1) {
		return fmt.Sprintf("FundingSource(%d)", i)
	}
	return _FundingSourceName[_FundingSourceIndex[i]:_FundingSourceIndex[i+1]]
}

var _FundingSourceValues = []FundingSource{0, 1, 2, 3}

var _FundingSourceNameToValueMap = map[string]FundingSource{
	_FundingSourceName[0:3]:   0,
	_FundingSourceName[3:10]:  1,
	_FundingSourceName[10:18]: 2,
	_FundingSourceName[18:30]: 3,
}

// FundingSourceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FundingSourceString(s string) (FundingSource, error) {
	if val, ok := _FundingSourceNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FundingSource values", s)
}

// FundingSourceValues returns all values of the enum
func FundingSourceValues() []FundingSource {
	return _FundingSourceValues
}

// IsAFundingSource returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FundingSource) IsAFundingSource() bool {
	for _, v := range _FundingSourceValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FundingSource
func (i FundingSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FundingSource
func (i *FundingSource) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FundingSource should be a string, got %s", data)
	}

	var err error
	*i, err = FundingSourceString(s)
	return err
}
