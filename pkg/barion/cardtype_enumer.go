// Code generated by "enumer -type=CardType -json"; DO NOT EDIT.

//
package barion

import (
	"encoding/json"
	"fmt"
)

const _CardTypeName = "UnknownMasterCardVisaAmericanExpressElectronMaestro"

var _CardTypeIndex = [...]uint8{0, 7, 17, 21, 36, 44, 51}

func (i CardType) String() string {
	if i < 0 || i >= CardType(len(_CardTypeIndex)-1) {
		return fmt.Sprintf("CardType(%d)", i)
	}
	return _CardTypeName[_CardTypeIndex[i]:_CardTypeIndex[i+1]]
}

var _CardTypeValues = []CardType{0, 1, 2, 3, 4, 5}

var _CardTypeNameToValueMap = map[string]CardType{
	_CardTypeName[0:7]:   0,
	_CardTypeName[7:17]:  1,
	_CardTypeName[17:21]: 2,
	_CardTypeName[21:36]: 3,
	_CardTypeName[36:44]: 4,
	_CardTypeName[44:51]: 5,
}

// CardTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CardTypeString(s string) (CardType, error) {
	if val, ok := _CardTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CardType values", s)
}

// CardTypeValues returns all values of the enum
func CardTypeValues() []CardType {
	return _CardTypeValues
}

// IsACardType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CardType) IsACardType() bool {
	for _, v := range _CardTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CardType
func (i CardType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CardType
func (i *CardType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CardType should be a string, got %s", data)
	}

	var err error
	*i, err = CardTypeString(s)
	return err
}
