// Code generated by "enumer -type=PaymentType -json"; DO NOT EDIT.

//
package barion

import (
	"encoding/json"
	"fmt"
)

const _PaymentTypeName = "ImmediateReservationDelayedCapture"

var _PaymentTypeIndex = [...]uint8{0, 9, 20, 34}

func (i PaymentType) String() string {
	if i < 0 || i >= PaymentType(len(_PaymentTypeIndex)-1) {
		return fmt.Sprintf("PaymentType(%d)", i)
	}
	return _PaymentTypeName[_PaymentTypeIndex[i]:_PaymentTypeIndex[i+1]]
}

var _PaymentTypeValues = []PaymentType{0, 1, 2}

var _PaymentTypeNameToValueMap = map[string]PaymentType{
	_PaymentTypeName[0:9]:   0,
	_PaymentTypeName[9:20]:  1,
	_PaymentTypeName[20:34]: 2,
}

// PaymentTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PaymentTypeString(s string) (PaymentType, error) {
	if val, ok := _PaymentTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PaymentType values", s)
}

// PaymentTypeValues returns all values of the enum
func PaymentTypeValues() []PaymentType {
	return _PaymentTypeValues
}

// IsAPaymentType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PaymentType) IsAPaymentType() bool {
	for _, v := range _PaymentTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PaymentType
func (i PaymentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PaymentType
func (i *PaymentType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PaymentType should be a string, got %s", data)
	}

	var err error
	*i, err = PaymentTypeString(s)
	return err
}
