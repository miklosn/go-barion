// Code generated by "enumer -type=Currency -json"; DO NOT EDIT.

//
package barion

import (
	"encoding/json"
	"fmt"
)

const _CurrencyName = "HUFEURUSDCZK"

var _CurrencyIndex = [...]uint8{0, 3, 6, 9, 12}

func (i Currency) String() string {
	if i < 0 || i >= Currency(len(_CurrencyIndex)-1) {
		return fmt.Sprintf("Currency(%d)", i)
	}
	return _CurrencyName[_CurrencyIndex[i]:_CurrencyIndex[i+1]]
}

var _CurrencyValues = []Currency{0, 1, 2, 3}

var _CurrencyNameToValueMap = map[string]Currency{
	_CurrencyName[0:3]:  0,
	_CurrencyName[3:6]:  1,
	_CurrencyName[6:9]:  2,
	_CurrencyName[9:12]: 3,
}

// CurrencyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CurrencyString(s string) (Currency, error) {
	if val, ok := _CurrencyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Currency values", s)
}

// CurrencyValues returns all values of the enum
func CurrencyValues() []Currency {
	return _CurrencyValues
}

// IsACurrency returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Currency) IsACurrency() bool {
	for _, v := range _CurrencyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Currency
func (i Currency) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Currency
func (i *Currency) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Currency should be a string, got %s", data)
	}

	var err error
	*i, err = CurrencyString(s)
	return err
}
